ID,Type,Context,Module,Subject,Description,Decision,Rationale,Timestamp
1,Technology,UI,-,"Framework Selection","Selection of the foundational web framework for the project.","Choose React.","React's component-based architecture aligns well with the SRP and decomposition principles required for single-word naming. Its vast ecosystem provides tools for performance optimization at scale.",2025-06-24T19:15:00Z
2,Technology,Build,Vite,"SVG Handling","How to handle SVG assets as reusable React components.","Use `vite-plugin-svgr`.","This plugin integrates seamlessly with Vite's build process, allowing direct import of SVGs as components (`import ... from './icon.svg?react'`), which is efficient and type-safe.",2025-06-27T10:00:00Z
3,Technology,Styling,UI,"CSS-in-JS Strategy","Choosing a library for component-level styling that integrates with React and a design token system.","Use `styled-components`.","It allows for creating styled primitive components, has excellent TypeScript support, and works naturally with a `ThemeProvider` to consume design tokens from `theme.ts`.",2025-06-27T10:01:00Z
4,Pattern,Component,Atom,"Icon Loading Performance","Ensuring that icons, which can be numerous, do not negatively impact the application's initial load time.","Load icons dynamically using `React.lazy` and `import()`.","This pattern code-splits each icon, so the JavaScript for an icon is only fetched from the server when the icon is first rendered, rather than being part of the main bundle.",2025-06-27T10:02:00Z
5,"Pattern","Architecture","Adapter","Decoupling from External Libraries","To prevent tight coupling with external library APIs (React, Styled-Components) and enforce internal single-word conventions.","Introduce an Adapter Layer (`src/adapter`).","This layer acts as an Anti-Corruption Layer, encapsulating all external libraries and exposing a clean, single-word API to the rest of the application. This centralizes dependencies and makes future library swaps or upgrades significantly easier.","2025-06-28T11:00:00Z"
6,"Decision","Architecture","Adapter","Adapter API Refactor","The API exposed by the adapter layer needed to be corrected to match its intended use.","Refactor the adapter to expose `dom` and `style` objects, with methods like `dom.root`, `style.global`, and `style.provider` attached to them.","The initial implementation had mismatched exports (e.g., top-level `Provider`) and usage (`style.provider`), causing build failures. This refactor created a correct, more intuitive API.","2025-06-25T14:30:00Z"
7,"Decision","UI","Core","Theme Typography Standardization","The typography sizes in `theme.ts` were generic and needed to be more semantic.","Replace generic sizes (`small`, `medium`) with semantic names (`body`, `subtitle`, `title`).","This provides clearer intent for text styles and ensures components use the theme consistently, which became necessary after the `Button` component broke from the initial refactor.","2025-06-25T14:31:00Z"
8,"Decision","UI","Core","Theme Shadow Expansion","The theme lacked a comprehensive set of shadow styles, leading to potential hardcoded values.","Add a `shadow` object to the theme with `primary`, `secondary`, and `neutral` variants, each with a size scale (xs, sm, md, lg).","This tokenizes elevation and depth effects, allowing components like `Card` to apply them dynamically and consistently, fulfilling a core requirement from `Task.md`.","2025-06-25T14:32:00Z"